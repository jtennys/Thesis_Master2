; Generated by PSoC Designer 5.0.985.0
;
INCLUDE "PSoCDynamic.inc"
;==========================================================================
;  PSoCConfig.asm
;  @PSOC_VERSION
;
;  Version: 0.85
;  Revised: June 22, 2004
;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
;
;  This file is generated by the Device Editor on Application Generation.
;  It contains code which loads the configuration data table generated in
;  the file PSoCConfigTBL.asm
;
;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
;  Edits to this file will not be preserved.
;==========================================================================
;
include "m8c.inc"
include "memory.inc"
include "GlobalParams.inc"

export LoadConfigInit
export _LoadConfigInit
export LoadConfig_transmitter_config
export _LoadConfig_transmitter_config
export UnloadConfig_transmitter_config
export _UnloadConfig_transmitter_config
export ReloadConfig_transmitter_config
export _ReloadConfig_transmitter_config
export LoadConfig_pc_listener
export _LoadConfig_pc_listener
export UnloadConfig_pc_listener
export _UnloadConfig_pc_listener
export LoadConfig_receiver_config
export _LoadConfig_receiver_config
export UnloadConfig_receiver_config
export _UnloadConfig_receiver_config
export UnloadConfig_Total
export _UnloadConfig_Total
export ACTIVE_CONFIG_STATUS

export NO_SHADOW
export _NO_SHADOW

FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
END_CONFIG_TABLE:   equ ffh         ;end of config table indicator

AREA psoc_config(rom, rel)

;---------------------------------------------------------------------------
; LoadConfigInit - Establish the start-up configuration (except for a few
;                  parameters handled by boot code, like CPU speed). This
;                  function can be called from user code, but typically it
;                  is only called from boot.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfigInit:
 LoadConfigInit:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	mov		[ACTIVE_CONFIG_STATUS], 0

	lcall	LoadConfig_transmitter_config
	lcall	LoadConfigTBL_transmitter_config_Ordered


    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration transmitter_config
;
;    Load configuration registers for transmitter_config.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_transmitter_config:
 LoadConfig_transmitter_config:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_transmitter_config_Bank0
    mov     X, <LoadConfigTBL_transmitter_config_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_transmitter_config_Bank1
    mov     X, <LoadConfigTBL_transmitter_config_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Reload Configuration transmitter_config
;
;    Reload configuration registers for transmitter_config.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_ReloadConfig_transmitter_config:
 ReloadConfig_transmitter_config:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >ReloadConfigTBL_transmitter_config_Bank0
    mov     X, <ReloadConfigTBL_transmitter_config_Bank0
    lcall   LoadConfig              ; Reload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >ReloadConfigTBL_transmitter_config_Bank1
    mov     X, <ReloadConfigTBL_transmitter_config_Bank1
    lcall   LoadConfig              ; Reload the bank 1 values

; set config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	or		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], transmitter_config_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration transmitter_config
;
;    Reset configuration registers for transmitter_config
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_transmitter_config:
 UnloadConfig_transmitter_config:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_transmitter_config_Bank0
    mov     X, <UnloadConfigTBL_transmitter_config_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_transmitter_config_Bank1
    mov     X, <UnloadConfigTBL_transmitter_config_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank1
	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+transmitter_config_ADDR_OFF], ~transmitter_config_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration pc_listener
;
;    Load configuration registers for pc_listener.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_pc_listener:
 LoadConfig_pc_listener:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~20h
	or		reg[ 0h], 20h
; writing Port_0_DriveMode_1 register
	and		reg[ 1h], ~20h
; writing Port_0_DriveMode_2 register
	M8C_SetBank0
	and		reg[ 3h], ~a0h
; writing Port_0_GlobalSelect register
	and		reg[ 2h], ~a0h
	or		reg[ 2h], a0h
; writing OscillatorControl_1 register
	M8C_SetBank1
	and		reg[e1h], ~ffh
	or		reg[e1h], c1h
; writing Row_1_OutputDrive_0 register
	M8C_SetBank0
	and		reg[bdh], ~20h
	or		reg[bdh], 20h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_pc_listener_Bank0
    mov     X, <LoadConfigTBL_pc_listener_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_pc_listener_Bank1
    mov     X, <LoadConfigTBL_pc_listener_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], pc_listener_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration pc_listener
;
;    Reset configuration registers for pc_listener
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_pc_listener:
 UnloadConfig_pc_listener:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_pc_listener_Bank0
    mov     X, <UnloadConfigTBL_pc_listener_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_pc_listener_Bank1
    mov     X, <UnloadConfigTBL_pc_listener_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank1
; writing OscillatorControl_1 register
	and		reg[e1h], ~ffh
	or		reg[e1h], 99h
; writing Row_1_OutputDrive_0 register
	M8C_SetBank0
	and		reg[bdh], ~20h
; writing Port_0_GlobalSelect register
	and		reg[ 2h], ~a0h
; writing Port_0_DriveMode_2 register
	and		reg[ 3h], ~a0h
	or		reg[ 3h], a0h
; writing Port_0_DriveMode_1 register
	M8C_SetBank1
	and		reg[ 1h], ~20h
	or		reg[ 1h], 20h
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~20h
	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+pc_listener_ADDR_OFF], ~pc_listener_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration receiver_config
;
;    Load configuration registers for receiver_config.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_receiver_config:
 LoadConfig_receiver_config:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~10h
; writing Port_0_DriveMode_1 register
	and		reg[ 1h], ~10h
	or		reg[ 1h], 10h
; writing Row_0_InputMux register
	M8C_SetBank0
	and		reg[b0h], ~ 3h
	or		reg[b0h],  1h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~ 2h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_receiver_config_Bank0
    mov     X, <LoadConfigTBL_receiver_config_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_receiver_config_Bank1
    mov     X, <LoadConfigTBL_receiver_config_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], receiver_config_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration receiver_config
;
;    Reset configuration registers for receiver_config
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_receiver_config:
 UnloadConfig_receiver_config:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_receiver_config_Bank0
    mov     X, <UnloadConfigTBL_receiver_config_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_receiver_config_Bank1
    mov     X, <UnloadConfigTBL_receiver_config_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank1
; writing Row_0_InputMux register
	M8C_SetBank0
	and		reg[b0h], ~ 3h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~ 2h
	or		reg[b5h],  2h
; writing Port_0_DriveMode_1 register
	M8C_SetBank1
	and		reg[ 1h], ~10h
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~10h
	or		reg[ 0h], 10h
	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+receiver_config_ADDR_OFF], ~receiver_config_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration Total
;
;    Reset configuration registers for Total
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_Total:
 UnloadConfig_Total:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_Total_Bank0
    mov     X, <UnloadConfigTBL_Total_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_Total_Bank1
    mov     X, <UnloadConfigTBL_Total_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank1
	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	mov		[ACTIVE_CONFIG_STATUS+0], 0
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret




;---------------------------------------------------------------------------
; LoadConfig - Set IO registers as specified in ROM table of (address,value)
;              pairs. Terminate on address=0xFF.
;
;  INPUTS:  [A,X] points to the table to be loaded
;           Flag Register Carry bit encodes the Register Bank
;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
;
;  RETURNS: nothing.
;
;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
;                X-3 Temporary store for register address
;                X-2 LSB of config table address
;                X-1 MSB of config table address
;
LoadConfig:
    RAM_PROLOGUE RAM_USE_CLASS_2
    add     SP, 2                   ; Set up local vars
    push    X                       ; Save config table address on stack
    push    A
    mov     X, SP
    mov     [X-4], 0                ; Set default Destination to Bank 0
    jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
    mov     [X-4], 1                ; No Carry: default to Bank 1
.BankSelectSaved:
    pop     A
    pop     X

LoadConfigLp:
    M8C_SetBank0                    ; Switch to bank 0
    M8C_ClearWDT                    ; Clear the watchdog for long inits
    push    X                       ; Preserve the config table address
    push    A
    romx                            ; Load register address from table
    cmp     A, END_CONFIG_TABLE     ; End of table?
    jz      EndLoadConfig           ;   Yes, go wrap it up
    mov     X, SP                   ;
    tst     [X-4], 1                ; Loading IO Bank 1?
    jz      .IOBankNowSet           ;    No, Bank 0 is fine
    M8C_SetBank1                    ;   Yes, switch to Bank 1
.IOBankNowSet:
    mov     [X-3], A                ; Stash the register address
    pop     A                       ; Retrieve the table address
    pop     X
    inc     X                       ; Advance to the data byte
    adc     A, 0
    push    X                       ; Save the config table address again
    push    A
    romx                            ; load config data from the table
    mov     X, SP                   ; retrieve the register address
    mov     X, [X-3]
    mov     reg[X], A               ; Configure the register
    pop     A                       ; retrieve the table address
    pop     X
    inc     X                       ; advance to next table entry
    adc     A, 0
    jmp     LoadConfigLp            ; loop to configure another register
EndLoadConfig:
    add     SP, -4
    RAM_EPILOGUE RAM_USE_CLASS_2
    ret

AREA InterruptRAM(ram, rel)

NO_SHADOW:
_NO_SHADOW:
; active configuration status byte
ACTIVE_CONFIG_STATUS:	BLK	1

AREA text(rom, rel)
